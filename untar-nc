#!/usr/bin/env python

import bz2
import gzip
import os
import shutil
import stat
import sys
import tarfile

checked_paths = {}
checked_perms = []

def untar_nc (filename, manifest_filename=".untar-nc_manifest"):
	backup_file(manifest_filename)
	manifest = open(manifest_filename, "w")
	try:
		tarball = tarfile.open(filename)
		contents = tarball.getmembers()
		for item in contents:
			safe_extract(tarball, item, manifest)
	except Exception as e:
		sys.stderr.write(str(e) + "\n")
	manifest.close()

def safe_extract (tarball, item, manifest=sys.stdout):
	metadata = None
	if os.access(item.name, os.F_OK):
		metadata = os.lstat(item.name)
	path = os.path.split(item.name)[0]
	if metadata != None:
		if item.isdir():
			record = []
			record.append((oct(stat.S_IMODE(metadata.st_mode)), oct(item.mode)))
			record.append((str(metadata.st_uid), str(item.uid)))
			record.append((str(metadata.st_gid), str(item.gid)))
			manifest.write("/" + item.name + ",")
			manifest.write(",".join([":".join(i) for i in record]))
			manifest.write("\n")
		else:
			manifest.write(item.name)
			manifest.write("\n")
			ensure_writeable(path, lambda: backup_file(item.name))
	else:
		manifest.write(item.name)
		manifest.write("\n")
	ensure_writeable(path, lambda: tarball.extract(item))

def ensure_writeable (directory, action):
	if directory == '':
		directory = '.'
	if os.access(directory, os.W_OK):
		action()
	else:
		path = os.path.split(directory)[0]
		if path == '':
			writeable_do(directory, action)
		else:
			ensure_writeable (path, lambda: writeable_do(directory, action))

def writeable_do (directory, action):
	orig_mode = stat.S_IMODE(os.lstat(directory).st_mode)
	os.chmod(directory, stat.S_IRWXU|stat.S_IRWXG|stat.S_IRWXO)
	action()
	os.chmod(directory, orig_mode)


def backup_file (src, dest=None):
	if not os.access(src, os.F_OK):
		return
	path, basename = os.path.split(src)
	if dest == None:
		dest = os.path.join(path, "." + basename + ".bak.1")
	if os.access(dest, os.F_OK):
		base, num = os.path.splitext(dest)
		backup_num = int(num[1:]) + 1
		new_dest = base + "." + str(backup_num)
		backup_file(dest, new_dest)
	shutil.copy2(src, dest)

if __name__=='__main__':
	untar_nc(*sys.argv[1:])

